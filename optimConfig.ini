#compute device
device = 'cuda' #'cuda' or 'cpu'

#tracker
lamdmarksDetectorType = 'fan' # 'mediapipe' or 'fan (mediapipe is much more stable than fan)

#morphable model
path = './baselMorphableModel'
textureResolution = 512
trimPca=False #if True keep only a subset of the pca basis (eigen vectors)

#spherical harmonics
bands = 9
envMapRes = 64
smoothSh=True #smooth the optimized  environment map 
saveExr=False #save the optimized  env map as exr or not ( if False a png is saved)

#image
maxResolution = 512 #maximum allowed resolution (if input image is larger it will be automatically scaled down). this limitation is here to allow the library to run on hardware with limited gpu memory and also to maintain  a raisonable optimization speed on non rtx gpus. this limit can be increased on decent gpus/cpus

#camera
camFocalLength = 3000.0 #focal length in pixels (=  f_{mm} * imageWidth / sensorWidth)
optimizeFocalLength = True #if True the initial focal length is estimated otherwise it remains constant 

#optimization
iterStep1 = 2000 # number of iterations for the coarse optim
iterStep2 = 400 #was 400 number of iteration for the first dense optim (based on statistical priors)
iterStep3 = 100 #number of iterations for refining the statistical albedo priors
weightLandmarksLossStep2 = 0.001 #landmarks weight during step2
weightLandmarksLossStep3 = 0.001  # landmarks weight during step3

weightShapeReg = 0.001 #weight for shape regularization
weightExpressionReg = 0.001  # weight for expression regularization
weightAlbedoReg = 0.001  # weight for albedo regularization

#regularizers for diffuse texture in step 3
weightDiffuseSymmetryReg = 300. #symmetry regularizer weight for diffuse texture (at step 3). u may want to increase it in case of harsh shadows
weightDiffuseConsistencyReg = 100.  # consistency regularizer weight for diffuse texture (at step 3). u may want to increase it in case of harsh shadows
weightDiffuseSmoothnessReg = 0.001  # smoothness regularizer weight for diffuse texture (at step 3)

#regularizers for specular  texture in step 3
weightSpecularSymmetryReg = 200.  # symmetry regularizer weight for specular texture (at step 3). u may want to increase it in case of harsh shadows
weightSpecularConsistencyReg = 2.  # consistency regularizer weight for specular texture (at step 3). u may want to increase it in case of harsh shadows
weightSpecularSmoothnessReg = 0.001  # smoothness regularizer weight for specular texture (at step 3)

#regularizers for roughness texture in step 3
weightRoughnessSymmetryReg = 200.  # symmetry regularizer weight for roughness texture (at step 3). u may want to increase it in case of harsh shadows
weightRoughnessConsistencyReg = 0.  # consistency regularizer weight for roughness texture (at step 3). u may want to increase it in case of harsh shadows
weightRoughnessSmoothnessReg = 0.002  # smoothness regularizer weight for roughness texture (at step 3)

#debug
debugFrequency = 100 #display frequency during optimization (saved to debug directory) (0: no debug display)
debugOutput = True # generate outputs at each debugFrequency 
saveIntermediateStage = False #if True the output of stage 1 and 2 are saved. stage 3 is always saved which is the output of the optim
saveTime = True # if True will save the time taken in the txt
verbose = False #display loss on terminal if true

#ray tracing
rtSamples = 16 #the number of ray tracer samples to render the final output (higher is better but slower) best value is  20000  but on my old gpu it takes too much time to render. if u have nvidia rtx u are fine enjoy :) 
rtTrainingSamples = 8 #number of ray tracing to use during training
bounces = 1 #number of bounces

smoothing = False
rendererName = mitsuba # redner or mitsuba or vertex